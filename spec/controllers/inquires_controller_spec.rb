require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe InquiresController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # Inquire. As you add validations to Inquire, be sure to
  # adjust the attributes here as well.

  let(:invalid_attributes) {
    {status: 'fake status'}
  }

  before(:each) {request.accept = 'application/json'}



  describe "GET index" do
    context 'as client' do
      include_context 'signed in as client'
      it "assigns all client's inquires as @inquires" do
        get :index
        expect(assigns(:inquires)).to eq(client.inquires)
      end
    end
    context 'as operator' do
      include_context 'signed in as operator'
      it "assigns all client's inquires as @inquires" do
        get :index
        expect(assigns(:inquires)).to eq(operator.client.inquires)
      end
    end
  end

  describe "GET show" do
    context 'as client' do
      include_context 'signed in as client'

      let(:inquire) { FactoryGirl.create :inquire, client: client}

      it "assigns the requested inquire as @inquire" do
        get :show, {:id => inquire.to_param}
        expect(assigns(:inquire)).to eq(inquire)
      end
    end
    context 'as operator' do
      include_context 'signed in as operator'

      let(:inquire) { FactoryGirl.create :inquire, client: operator.client}

      it "assigns the requested inquire as @inquire" do
        get :show, {:id => inquire.to_param}
        expect(assigns(:inquire)).to eq(inquire)
      end
    end
  end


  describe 'POST create' do

    let(:client) { FactoryGirl.create :client }

    let(:valid_attributes) { {email: 'inquire@example.com', phone: '99223453221', name: 'vasya', vk_user_info: {last_name: 'name'}} }

    context 'with valid params' do

      it 'creates a new Inquire' do
        expect {
          post :create, {client_id: client.to_param, inquire: valid_attributes}
        }.to change{client.reload.inquires.count}.by(1)
      end

      it 'assigns a newly created inquire as @inquire' do
        post :create, {client_id: client.to_param, inquire: valid_attributes}
        expect(assigns(:inquire)).to be_a(Inquire)
      end

      it 'set vk last name' do
        post :create, {client_id: client.to_param, inquire: valid_attributes}
        expect(assigns(:inquire).vk_user_info[:last_name]).to eq('name')
      end
    end

    context "with invalid params" do
      let(:invalid_attributes) { {email: 'inquire', phone: '99223453221', name: 'vasya'} }
      it 'responds with status unprocessable_entity' do
        post :create, {client_id: client.to_param, inquire: invalid_attributes}
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end

    it 'response 404 if clients_id is not correct' do
      expect{
        post :create, {client_id: 'fake', inquire: valid_attributes}
      }.to raise_error(Mongoid::Errors::DocumentNotFound)
    end

    it 'responds with status unprocessable_entity if clients_id is blank' do
      post :create, {inquire: invalid_attributes}
      expect(response).to have_http_status(:unprocessable_entity)
    end
  end

  describe "PUT update" do
    RSpec.shared_examples 'updater' do
      context "with valid params" do
        let(:new_attributes) { { status: 'close' } }

        it "updates the requested inquire" do
          expect{put :update, {id: inquire.to_param, inquire: new_attributes}}.to change{
            inquire.reload.status
          }.to('close')
        end
      end

      context "with invalid params" do
        it "not updates the requested inquire" do
          expect{put :update, {id: inquire.to_param, inquire: invalid_attributes}}.not_to change{
            inquire.reload.status
          }
        end
      end
    end

    context 'as client' do
      include_context 'signed in as client'

      let(:inquire) { FactoryGirl.create :inquire, client: client}

      it_should_behave_like 'updater'
    end

    context 'as operator' do
      include_context 'signed in as operator'

      let(:inquire) { FactoryGirl.create :inquire, client: operator.client}

      it_should_behave_like 'updater'
    end
  end

  describe "DELETE destroy" do
    context 'as client' do
      include_context 'signed in as client'

      it 'destroys the requested inquire' do
        expect {
          delete :destroy, {id: client.inquires.first.to_param}
        }.to change{client.reload.inquires.count}.by(-1)
      end
    end

    context 'as operator' do
      include_context 'signed in as operator'

      let(:inquire) { FactoryGirl.create :inquire, client: operator.client}

      it 'access denied' do
        expect {
          delete :destroy, {id: inquire.to_param}
        }.to raise_error(CanCan::AccessDenied)
      end
    end


  end

end
